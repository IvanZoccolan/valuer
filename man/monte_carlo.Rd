% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vanilla_option_pricing.R
\name{monte_carlo}
\alias{monte_carlo}
\title{Monte Carlo pricing routine.}
\usage{
monte_carlo(the_option, spot, vol, int_rate, path_num, statistics_gatherer)
}
\arguments{
\item{the_option}{A vanilla_option object.}

\item{spot}{A numeric scalar representing the initial
value of the underlying asset.}

\item{vol}{A constant_parameters object representing
the volatility of the underlying asset.}

\item{int_rate}{A constant_parameters object representing
the spot interest rate.}

\item{path_num}{An integer scalar  representing the number of
simulated paths used for the Monte Carlo simulation.}

\item{statistics_gatherer}{A statistics_mean object where the
results of the simulation are stored.}
}
\description{
Estimates the price of an european derivative by means of
Monte Carlo simulation.
}
\details{
This function is a simple
\href{https://en.wikipedia.org/wiki/Monte_Carlo_method}{Monte Carlo} routine
to estimate the value of an european derivative.
It's a porting from C++ code by M. Joshi  published in his
C++ Design Patterns and Derivatives Pricing
}
\examples{
the_gatherer <- mc_gatherer$new()

vol_param <- constant_parameters$new(0.2)

r_param <- constant_parameters$new(0.01)

call_payoff <- payoff_call$new(100)

call_option <- vanilla_option$new(call_payoff, 1)

monte_carlo(call_option, spot = 100, vol_param, r_param, path_num = 1e4,
the_gatherer)

the_gatherer$get_results()
}

